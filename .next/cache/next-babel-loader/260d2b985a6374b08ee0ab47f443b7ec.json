{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport function checkForSW() {\n  if (\"serviceWorker\" in navigator && \"caches\" in window) {\n    setTimeout(function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigator.serviceWorker.register(\"../my-worker.js\").then(function (registration) {\n                console.log(\"[ServiceWorker] _app.js service worker registration successful\", registration);\n                return true;\n              }).catch(function (err) {\n                console.warn(\"[ServiceWorker] _app.js service worker registration failed\", err.message);\n                return false;\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 0);\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/wajari/dev/blog-next/utils/check-for-sw.js"],"names":["checkForSW","navigator","window","setTimeout","serviceWorker","register","then","registration","console","log","catch","err","warn","message"],"mappings":";AAAA,OAAO,SAASA,UAAT,GAAsB;AACzB,MAAI,mBAAmBC,SAAnB,IAAgC,YAAYC,MAAhD,EAAwD;AACpDC,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AACPF,cAAAA,SAAS,CAACG,aAAV,CACKC,QADL,CACc,iBADd,EAEKC,IAFL,CAEU,UAAAC,YAAY,EAAI;AAClBC,gBAAAA,OAAO,CAACC,GAAR,CACI,gEADJ,EAEIF,YAFJ;AAIA,uBAAO,IAAP;AACH,eARL,EASKG,KATL,CASW,UAAAC,GAAG,EAAI;AACVH,gBAAAA,OAAO,CAACI,IAAR,CACI,4DADJ,EAEID,GAAG,CAACE,OAFR;AAIA,uBAAO,KAAP;AACH,eAfL;;AADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAiBP,CAjBO,CAAV;AAkBH;;AACD,SAAO,KAAP;AACH","sourcesContent":["export function checkForSW() {\n    if (\"serviceWorker\" in navigator && \"caches\" in window) {\n        setTimeout(async () => {\n            navigator.serviceWorker\n                .register(\"../my-worker.js\")\n                .then(registration => {\n                    console.log(\n                        \"[ServiceWorker] _app.js service worker registration successful\",\n                        registration\n                    );\n                    return true;\n                })\n                .catch(err => {\n                    console.warn(\n                        \"[ServiceWorker] _app.js service worker registration failed\",\n                        err.message\n                    );\n                    return false;\n                });\n        }, 0);\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}