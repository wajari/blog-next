{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { formatSEODate, getSecondsSinceEpoch } from \"./formatters\";\nimport { config } from \"../config/config.yml\";\n\nvar postFileNames = function postFileNames() {\n  var postFileNames = [\"blog-react.mdx\", \"post-four-link-on-twitter.mdx\", \"post-one-code-block-demo.mdx\", \"post-three-smooth-scroll-and-reading-progress-bar.mdx\", \"post-two-image-demo.mdx\"] || [];\n  return Promise.resolve(postFileNames);\n};\n\nvar createPostList = function createPostList(fileNameList) {\n  return fileNameList.reduce(function (collection, name) {\n    // These are properties we want to extract from the file's meta export.\n    // This data is returned is added to the `collection` array below.\n    var _require = require(\"../pages/blog/\".concat(name)),\n        Component = _require.default;\n\n    var _require$meta = require(\"../pages/blog/\".concat(name)).meta,\n        title = _require$meta.title,\n        tags = _require$meta.tags,\n        layout = _require$meta.layout,\n        publishDate = _require$meta.publishDate,\n        modifiedDate = _require$meta.modifiedDate,\n        seoDescription = _require$meta.seoDescription,\n        _require$meta$hidePro = _require$meta.hideProgressBar,\n        hideProgressBar = _require$meta$hidePro === void 0 ? false : _require$meta$hidePro,\n        _require$meta$exclude = _require$meta.exclude,\n        exclude = _require$meta$exclude === void 0 ? false : _require$meta$exclude,\n        moreMeta = _objectWithoutProperties(_require$meta, [\"title\", \"tags\", \"layout\", \"publishDate\", \"modifiedDate\", \"seoDescription\", \"hideProgressBar\", \"exclude\"]);\n\n    if (exclude) return collection; // remove the extension from the file name to make a component name string\n\n    var cleaned_name = name.split(\".\")[0]; // format dates for SEO, but preserve publishDate as the latter is\n    // displayed on the blog post. Currently not displaying modifiedDate, but\n    // preserving it for possible future use.\n\n    var formattedPublishDate = formatSEODate(publishDate);\n    var formattedModifiedDate = formatSEODate(modifiedDate, true); // This is used to sort pages/posts\n\n    var secondsSinceEpoch = getSecondsSinceEpoch(formattedPublishDate); // data that is returned for each page\n\n    collection.push(_objectSpread({\n      Component: Component,\n      title: title,\n      tags: tags,\n      layout: layout,\n      publishDate: publishDate,\n      formattedPublishDate: formattedPublishDate,\n      modifiedDate: modifiedDate,\n      formattedModifiedDate: formattedModifiedDate,\n      seoDescription: seoDescription,\n      exclude: exclude,\n      urlPath: \"/\".concat(cleaned_name),\n      fullUrlPath: \"/blog/\".concat(cleaned_name),\n      canonicalUrl: \"\".concat(config.baseUrl, \"/\").concat(cleaned_name),\n      hideProgressBar: hideProgressBar,\n      name: cleaned_name,\n      type: \"post\",\n      secondsSinceEpoch: secondsSinceEpoch\n    }, moreMeta));\n    return collection;\n  }, []);\n};\n\nexport function posts() {\n  return postFileNames().then(function (fileNameList) {\n    var postList = createPostList(fileNameList);\n    var sortedList = postList.sort(function (a, b) {\n      return a.secondsSinceEpoch - b.secondsSinceEpoch;\n    }).reverse();\n    return sortedList;\n  }).catch(function (error) {\n    return console.log(\"Error creating postList\", error);\n  });\n}","map":{"version":3,"sources":["/home/wajari/dev/blog-next/utils/post-list.js"],"names":["formatSEODate","getSecondsSinceEpoch","config","postFileNames","Promise","resolve","createPostList","fileNameList","reduce","collection","name","require","Component","default","meta","title","tags","layout","publishDate","modifiedDate","seoDescription","hideProgressBar","exclude","moreMeta","cleaned_name","split","formattedPublishDate","formattedModifiedDate","secondsSinceEpoch","push","urlPath","fullUrlPath","canonicalUrl","baseUrl","type","posts","then","postList","sortedList","sort","a","b","reverse","catch","error","console","log"],"mappings":"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","sourcesContent":["import { formatSEODate, getSecondsSinceEpoch } from \"./formatters\";\nimport { config } from \"../config/config.yml\";\n\nconst postFileNames = () => {\n    const postFileNames =\n        preval`module.exports = require(\"fs\").readdirSync(\"./pages/blog\")` ||\n        [];\n    return Promise.resolve(postFileNames);\n};\n\nconst createPostList = fileNameList => {\n    return fileNameList.reduce((collection, name) => {\n        // These are properties we want to extract from the file's meta export.\n        // This data is returned is added to the `collection` array below.\n        const { default: Component } = require(`../pages/blog/${name}`);\n        const {\n            title,\n            tags,\n            layout,\n            publishDate,\n            modifiedDate,\n            seoDescription,\n            hideProgressBar = false,\n            exclude = false,\n            ...moreMeta // any extra properties a post may have\n        } = require(`../pages/blog/${name}`).meta;\n\n        if (exclude) return collection;\n\n        // remove the extension from the file name to make a component name string\n        const cleaned_name = name.split(\".\")[0];\n\n        // format dates for SEO, but preserve publishDate as the latter is\n        // displayed on the blog post. Currently not displaying modifiedDate, but\n        // preserving it for possible future use.\n        const formattedPublishDate = formatSEODate(publishDate);\n\n        const formattedModifiedDate = formatSEODate(modifiedDate, true);\n\n        // This is used to sort pages/posts\n        const secondsSinceEpoch = getSecondsSinceEpoch(formattedPublishDate);\n\n        // data that is returned for each page\n        collection.push({\n            Component,\n            title,\n            tags,\n            layout,\n            publishDate,\n            formattedPublishDate,\n            modifiedDate,\n            formattedModifiedDate,\n            seoDescription,\n            exclude,\n            urlPath: `/${cleaned_name}`,\n            fullUrlPath: `/blog/${cleaned_name}`,\n            canonicalUrl: `${config.baseUrl}/${cleaned_name}`,\n            hideProgressBar,\n            name: cleaned_name,\n            type: \"post\",\n            secondsSinceEpoch,\n            ...moreMeta // any extra properties a post may have\n        });\n\n        return collection;\n    }, []);\n};\n\nexport function posts() {\n    return postFileNames()\n        .then(fileNameList => {\n            const postList = createPostList(fileNameList);\n            const sortedList = postList\n                .sort((a, b) => a.secondsSinceEpoch - b.secondsSinceEpoch)\n                .reverse();\n            return sortedList;\n        })\n        .catch(error => console.log(\"Error creating postList\", error));\n}\n"]},"metadata":{},"sourceType":"module"}