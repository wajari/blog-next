{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BlogEngine from \"./blog-engine\";\nexport default function (_x) {\n  return _ref.apply(this, arguments);\n}\n\nfunction _ref() {\n  _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(router) {\n    var splitRoute, compName, allPageData, postData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (router) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            // get the content component's file name from the router path\n            splitRoute = router.route.split(\"/\");\n            compName = splitRoute.length > 0 ? splitRoute[splitRoute.length - 1] : null; // for the root path, we want index.js file\n\n            compName = router.pathname == \"/\" ? \"index\" : compName; // get page data based on file name\n\n            _context.prev = 5;\n            _context.next = 8;\n            return BlogEngine();\n\n          case 8:\n            allPageData = _context.sent;\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](5);\n            console.log(\"Error getting post and page lists: \".concat(_context.t0));\n\n          case 14:\n            postData = allPageData.filter(function (component) {\n              return component.name == compName;\n            });\n            return _context.abrupt(\"return\", Promise.resolve(postData[0]));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 11]]);\n  }));\n  return _ref.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/wajari/dev/blog-next/utils/get-post-data.js"],"names":["BlogEngine","router","splitRoute","route","split","compName","length","pathname","allPageData","console","log","postData","filter","component","name","Promise","resolve"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,eAAvB;AAEA;AAAA;AAAA;;;kEAAe,iBAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACNA,MADM;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGX;AACMC,YAAAA,UAJK,GAIQD,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmB,GAAnB,CAJR;AAKPC,YAAAA,QALO,GAMPH,UAAU,CAACI,MAAX,GAAoB,CAApB,GAAwBJ,UAAU,CAACA,UAAU,CAACI,MAAX,GAAoB,CAArB,CAAlC,GAA4D,IANrD,EAQX;;AACAD,YAAAA,QAAQ,GAAGJ,MAAM,CAACM,QAAP,IAAmB,GAAnB,GAAyB,OAAzB,GAAmCF,QAA9C,CATW,CAWX;;AAXW;AAAA;AAAA,mBAcaL,UAAU,EAdvB;;AAAA;AAcPQ,YAAAA,WAdO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBPC,YAAAA,OAAO,CAACC,GAAR;;AAhBO;AAmBLC,YAAAA,QAnBK,GAmBMH,WAAW,CAACI,MAAZ,CACb,UAAAC,SAAS;AAAA,qBAAIA,SAAS,CAACC,IAAV,IAAkBT,QAAtB;AAAA,aADI,CAnBN;AAAA,6CAuBJU,OAAO,CAACC,OAAR,CAAgBL,QAAQ,CAAC,CAAD,CAAxB,CAvBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import BlogEngine from \"./blog-engine\";\n\nexport default async function(router) {\n    if (!router) return;\n\n    // get the content component's file name from the router path\n    const splitRoute = router.route.split(\"/\");\n    let compName =\n        splitRoute.length > 0 ? splitRoute[splitRoute.length - 1] : null;\n\n    // for the root path, we want index.js file\n    compName = router.pathname == \"/\" ? \"index\" : compName;\n\n    // get page data based on file name\n    let allPageData;\n    try {\n        allPageData = await BlogEngine();\n    } catch (error) {\n        console.log(`Error getting post and page lists: ${error}`);\n    }\n\n    const postData = allPageData.filter(\n        component => component.name == compName\n    );\n\n    return Promise.resolve(postData[0]);\n}\n"]},"metadata":{},"sourceType":"module"}