{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"module.exports = require(\\\"fs\\\").readdirSync(\\\"./pages\\\")\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { formatSEODate, getSecondsSinceEpoch } from \"./formatters\";\nimport { config } from \"../config/config.yml\"; // _app.js and _document.js are next.js specific files, and should be ignored\n// the blog directory is ignored here, but is processed in post-list.js\n\nvar ignoreList = [\"_app.js\", \"_document.js\", \"blog\"];\n\nvar pageFileNames = function pageFileNames() {\n  var allPageFileNames = preval(_templateObject()) || [];\n  var filteredFileNames = allPageFileNames.filter(function (name) {\n    return !name || !ignoreList.includes(name);\n  });\n  return Promise.resolve(filteredFileNames);\n};\n\nvar createPageList = function createPageList(fileNameList) {\n  return fileNameList.reduce(function (collection, name) {\n    // These are properties we want to extract from the file's meta export.\n    // This data is returned is added to the `collection` array below.\n    var _require = require(\"../pages/\".concat(name)),\n        Component = _require.default;\n\n    var _require$meta = require(\"../pages/\".concat(name)).meta,\n        title = _require$meta.title,\n        tags = _require$meta.tags,\n        layout = _require$meta.layout,\n        publishDate = _require$meta.publishDate,\n        modifiedDate = _require$meta.modifiedDate,\n        seoDescription = _require$meta.seoDescription,\n        _require$meta$hidePro = _require$meta.hideProgressBar,\n        hideProgressBar = _require$meta$hidePro === void 0 ? false : _require$meta$hidePro,\n        moreMeta = _objectWithoutProperties(_require$meta, [\"title\", \"tags\", \"layout\", \"publishDate\", \"modifiedDate\", \"seoDescription\", \"hideProgressBar\"]); // remove the extension from the file name to make a component name string\n\n\n    var cleaned_name = name.split(\".\")[0]; // format dates for SEO, but preserve publishDate as the latter is\n    // displayed on the blog post. Currently not displaying modifiedDate, but\n    // preserving it for possible future use.\n\n    var formattedPublishDate = formatSEODate(publishDate);\n    var formattedModifiedDate = formatSEODate(modifiedDate, true); // This is used to sort pages/posts\n\n    var secondsSinceEpoch = getSecondsSinceEpoch(formattedPublishDate); // data that is returned for each page\n\n    collection.push(_objectSpread({\n      Component: Component,\n      title: title,\n      tags: tags,\n      layout: layout,\n      publishDate: publishDate,\n      formattedPublishDate: formattedPublishDate,\n      modifiedDate: modifiedDate,\n      formattedModifiedDate: formattedModifiedDate,\n      seoDescription: seoDescription,\n      urlPath: \"/\".concat(cleaned_name === \"index\" ? \"\" : cleaned_name),\n      canonicalUrl: \"\".concat(config.baseUrl, \"/\").concat(cleaned_name === \"index\" ? \"\" : cleaned_name),\n      hideProgressBar: hideProgressBar,\n      name: cleaned_name,\n      type: \"page\",\n      secondsSinceEpoch: secondsSinceEpoch\n    }, moreMeta));\n    return collection;\n  }, []);\n};\n\nexport function pages() {\n  return pageFileNames().then(function (fileNameList) {\n    var pageList = createPageList(fileNameList);\n    var sortedList = pageList.sort(function (a, b) {\n      return a.secondsSinceEpoch - b.secondsSinceEpoch;\n    }).reverse();\n    return sortedList;\n  }).catch(function (error) {\n    return console.log(\"Error creating pageList\", error);\n  });\n}","map":{"version":3,"sources":["/home/wajari/dev/blog-next/utils/page-list.js"],"names":["formatSEODate","getSecondsSinceEpoch","config","ignoreList","pageFileNames","allPageFileNames","preval","filteredFileNames","filter","name","includes","Promise","resolve","createPageList","fileNameList","reduce","collection","require","Component","default","meta","title","tags","layout","publishDate","modifiedDate","seoDescription","hideProgressBar","moreMeta","cleaned_name","split","formattedPublishDate","formattedModifiedDate","secondsSinceEpoch","push","urlPath","canonicalUrl","baseUrl","type","pages","then","pageList","sortedList","sort","a","b","reverse","catch","error","console","log"],"mappings":"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","sourcesContent":["import { formatSEODate, getSecondsSinceEpoch } from \"./formatters\";\nimport { config } from \"../config/config.yml\";\n\n// _app.js and _document.js are next.js specific files, and should be ignored\n// the blog directory is ignored here, but is processed in post-list.js\nconst ignoreList = [\"_app.js\", \"_document.js\", \"blog\"];\n\nconst pageFileNames = () => {\n    const allPageFileNames =\n        preval`module.exports = require(\"fs\").readdirSync(\"./pages\")` || [];\n    const filteredFileNames = allPageFileNames.filter(\n        name => !name || !ignoreList.includes(name)\n    );\n    return Promise.resolve(filteredFileNames);\n};\n\nconst createPageList = fileNameList => {\n    return fileNameList.reduce((collection, name) => {\n        // These are properties we want to extract from the file's meta export.\n        // This data is returned is added to the `collection` array below.\n        const { default: Component } = require(`../pages/${name}`);\n        const {\n            title,\n            tags,\n            layout,\n            publishDate,\n            modifiedDate,\n            seoDescription,\n            hideProgressBar = false,\n            ...moreMeta // any extra properties a page may have\n        } = require(`../pages/${name}`).meta;\n\n        // remove the extension from the file name to make a component name string\n        let cleaned_name = name.split(\".\")[0];\n\n        // format dates for SEO, but preserve publishDate as the latter is\n        // displayed on the blog post. Currently not displaying modifiedDate, but\n        // preserving it for possible future use.\n        const formattedPublishDate = formatSEODate(publishDate);\n\n        const formattedModifiedDate = formatSEODate(modifiedDate, true);\n\n        // This is used to sort pages/posts\n        const secondsSinceEpoch = getSecondsSinceEpoch(formattedPublishDate);\n\n        // data that is returned for each page\n        collection.push({\n            Component,\n            title,\n            tags,\n            layout,\n            publishDate,\n            formattedPublishDate,\n            modifiedDate,\n            formattedModifiedDate,\n            seoDescription,\n            urlPath: `/${cleaned_name === \"index\" ? \"\" : cleaned_name}`,\n            canonicalUrl: `${config.baseUrl}/${\n                cleaned_name === \"index\" ? \"\" : cleaned_name\n            }`,\n            hideProgressBar,\n            name: cleaned_name,\n            type: \"page\",\n            secondsSinceEpoch,\n            ...moreMeta // any extra properties a page may have\n        });\n\n        return collection;\n    }, []);\n};\n\nexport function pages() {\n    return pageFileNames()\n        .then(fileNameList => {\n            const pageList = createPageList(fileNameList);\n            const sortedList = pageList\n                .sort((a, b) => a.secondsSinceEpoch - b.secondsSinceEpoch)\n                .reverse();\n            return sortedList;\n        })\n        .catch(error => console.log(\"Error creating pageList\", error));\n}\n"]},"metadata":{},"sourceType":"module"}