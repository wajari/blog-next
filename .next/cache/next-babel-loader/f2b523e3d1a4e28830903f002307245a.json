{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { posts } from \"./post-list\";\nimport { pages } from \"./page-list\";\nexport default (function _callee() {\n  var type,\n      _ref,\n      _ref2,\n      pageList,\n      postList,\n      allData,\n      sortedAllData,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          type = _args.length > 0 && _args[0] !== undefined ? _args[0] : \"all\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all([pages(), posts()]));\n\n        case 3:\n          _ref = _context.sent;\n          _ref2 = _slicedToArray(_ref, 2);\n          pageList = _ref2[0];\n          postList = _ref2[1];\n          // after combining the lists, they must be sorted again\n          allData = [].concat(_toConsumableArray(pageList), _toConsumableArray(postList));\n          sortedAllData = allData.sort(function (a, b) {\n            return a.secondsSinceEpoch - b.secondsSinceEpoch;\n          }).reverse();\n          _context.t0 = type;\n          _context.next = _context.t0 === \"posts\" ? 12 : _context.t0 === \"pages\" ? 13 : _context.t0 === \"all\" ? 14 : 14;\n          break;\n\n        case 12:\n          return _context.abrupt(\"return\", postList);\n\n        case 13:\n          return _context.abrupt(\"return\", pageList);\n\n        case 14:\n          return _context.abrupt(\"return\", sortedAllData);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});","map":{"version":3,"sources":["/home/wajari/dev/blog-next/utils/blog-engine.js"],"names":["posts","pages","type","Promise","all","pageList","postList","allData","sortedAllData","sort","a","b","secondsSinceEpoch","reverse"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,aAAtB;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAOC,UAAAA,IAAP,2DAAc,KAAd;AAAA;AAAA,2CAEwBC,OAAO,CAACC,GAAR,CAAY,CAACH,KAAK,EAAN,EAAUD,KAAK,EAAf,CAAZ,CAFxB;;AAAA;AAAA;AAAA;AAEJK,UAAAA,QAFI;AAEMC,UAAAA,QAFN;AAIX;AACMC,UAAAA,OALK,gCAKSF,QALT,sBAKsBC,QALtB;AAMLE,UAAAA,aANK,GAMWD,OAAO,CACxBE,IADiB,CACZ,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,CAACE,iBAAF,GAAsBD,CAAC,CAACC,iBAAlC;AAAA,WADY,EAEjBC,OAFiB,EANX;AAAA,wBASHX,IATG;AAAA,0CAUF,OAVE,wBAYF,OAZE,wBAcF,KAdE;AAAA;;AAAA;AAAA,2CAWII,QAXJ;;AAAA;AAAA,2CAaID,QAbJ;;AAAA;AAAA,2CAgBIG,aAhBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { posts } from \"./post-list\";\nimport { pages } from \"./page-list\";\n\nexport default async (type = \"all\") => {\n    // these lists are already sorted from newest to oldest\n    const [pageList, postList] = await Promise.all([pages(), posts()]);\n\n    // after combining the lists, they must be sorted again\n    const allData = [...pageList, ...postList];\n    const sortedAllData = allData\n        .sort((a, b) => a.secondsSinceEpoch - b.secondsSinceEpoch)\n        .reverse();\n    switch (type) {\n        case \"posts\":\n            return postList;\n        case \"pages\":\n            return pageList;\n        case \"all\":\n        default:\n            return sortedAllData;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}